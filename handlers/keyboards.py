from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import types
from datetime import datetime
from utils import rus_to_eng


def get_client_tel_keyboard():
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: InlineKeyboardBuilder –æ–±—ä–µ–∫—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏.
    """
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="client_data_save"),
                types.InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="client_data_edit"),
                width=1)
    return builder


def client_data_edit_keyboard(name, tel):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞—é –∏–º–µ–Ω–∏ –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param tel: –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: InlineKeyboardBuilder –æ–±—ä–µ–∫—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏.
    """
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text=f"{name}", callback_data="client_data_edit_name"),
                types.InlineKeyboardButton(text=f"{tel}", callback_data="client_data_edit_tel"),
                width=1)
    return builder


def client_menu_keyboard():
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: InlineKeyboardBuilder –æ–±—ä–µ–∫—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏.
    """
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text="–£—Å–ª—É–≥–∏", callback_data="client_show_services"))
    builder.row(types.InlineKeyboardButton(text="–ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="client_show_claims"))
    builder.row(types.InlineKeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—å", callback_data="client_show_profile"))
    return builder


def client_show_profile_keyboard():
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞.
    :return: InlineKeyboardBuilder –æ–±—ä–µ–∫—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏.
    """
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="client_data_edit"),
                types.InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="start"),
                width=1)
    return builder


def client_show_services_keyboard(client_services_titles, titles_prices):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥.
    :param client_services_titles: –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π —É—Å–ª—É–≥.
    :param titles_prices: –°–ø–∏—Å–æ–∫ —Ü–µ–Ω —É—Å–ª—É–≥.
    :return: InlineKeyboardBuilder –æ–±—ä–µ–∫—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏.
    """
    builder = InlineKeyboardBuilder()
    for i in range(len(client_services_titles)):
        builder.row(
            types.InlineKeyboardButton(text=f"{client_services_titles[i].capitalize()} | {titles_prices[i]}‚ÇΩ",
                                       callback_data=f"client_show_services_{rus_to_eng(client_services_titles[i])}"),
            width=1)
    builder.row(types.InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="start"),
                width=1)
    return builder


def client_show_workers_keyboard(workers, title):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω—É—é —É—Å–ª—É–≥—É.
    :param workers: –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.
    :param title: –ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏.
    :return: InlineKeyboardBuilder –æ–±—ä–µ–∫—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏.
    """
    builder = InlineKeyboardBuilder()
    for worker in workers:
        builder.row(
            types.InlineKeyboardButton(text=f"{worker['name']} ({worker['rating']}‚≠êÔ∏è)",
                                       callback_data=f"client_show_workers_{rus_to_eng(title)}_{worker['id']}"),
            width=1)
    builder.row(types.InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data=f"client_show_services"),
                width=1)
    return builder


def client_show_worker_keyboard(worker, title):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏.
    :param worker: –î–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.
    :param title: –ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏.
    :return: InlineKeyboardBuilder –æ–±—ä–µ–∫—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏.
    """
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è",
                                           callback_data=f"client_show_calendar_{worker['id']}_{rus_to_eng(title)}"),
                width=1)
    builder.row(types.InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data=f"client_show_services_{rus_to_eng(title)}"),
                width=1)
    return builder


def client_show_calendar_dates_keyboard(worker, title, dates):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏.
    :param worker: –î–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.
    :param title: –ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏.
    :param dates: –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç.
    :return: InlineKeyboardBuilder –æ–±—ä–µ–∫—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏.
    """
    builder = InlineKeyboardBuilder()
    buttons = []
    k = 0
    for date in dates:
        date_object = datetime.strptime(date, "%Y-%m-%d")
        buttons.append(
            types.InlineKeyboardButton(text=f"{date_object.strftime('%d.%m.%Y')}",
                                       callback_data=f"client_pick_time_{rus_to_eng(title)}_{worker['id']}_{date_object.strftime('%d%m%Y')}"))
    builder.row(*buttons, width=3)
    builder.row(types.InlineKeyboardButton(text='¬´ –ù–∞–∑–∞–¥ –∫ "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º"',
                                           callback_data=f"client_show_services_{rus_to_eng(title)}"),
                width=1)
    builder.row(types.InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥",
                                           callback_data=f"client_show_workers_{rus_to_eng(title)}_{worker['id']}"),
                width=1)
    return builder


def client_show_calendar_times_keyboard(worker, title, date, times):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –¥–ª—è –∑–∞–ø–∏—Å–∏.
    :param worker: –î–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.
    :param title: –ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏.
    :param date: –î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏.
    :param times: –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.
    :return: InlineKeyboardBuilder –æ–±—ä–µ–∫—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏.
    """
    builder = InlineKeyboardBuilder()
    buttons = []
    k = 0
    for time in times:
        time_object = datetime.strptime(time, "%H:%M").time()
        buttons.append(
            types.InlineKeyboardButton(text=f"{time_object.strftime('%H:%M')}",
                                       callback_data=f"client_send_claim_{rus_to_eng(title)}_{worker['id']}_{date}_{time_object.strftime('%H%M')}"))
    builder.row(*buttons, width=3)
    builder.row(types.InlineKeyboardButton(text='¬´ –ù–∞–∑–∞–¥ –∫ "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º"',
                                           callback_data=f"client_show_services_{rus_to_eng(title)}"),
                width=1)
    builder.row(types.InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥",
                                           callback_data=f"client_show_calendar_{worker['id']}_{rus_to_eng(title)}"),
                width=1)
    return builder


def client_send_claim_keyboard(worker, title, date, time_):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏.
    :param worker: –î–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.
    :param title: –ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏.
    :param date: –î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏.
    :param time_: –í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏.
    :return: InlineKeyboardBuilder –æ–±—ä–µ–∫—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏.
    """
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å',
                                           callback_data=f"send_claim_{rus_to_eng(title)}_{worker['id']}_{date}_{time_}"),
                width=1)
    builder.row(types.InlineKeyboardButton(text='¬´ –ù–∞–∑–∞–¥ –∫ "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º"',
                                           callback_data=f"client_show_services_{rus_to_eng(title)}"),
                width=1)
    builder.row(types.InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥",
                                           callback_data=f"client_pick_time_{rus_to_eng(title)}_{worker['id']}_{date}"),
                width=1)
    return builder


def send_claim_keyboard():
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏.
    :return: InlineKeyboardBuilder –æ–±—ä–µ–∫—Ç —Å –∫–Ω–æ–ø–∫–æ–π.
    """
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ¬ª", callback_data=f"start"),
                width=1)
    return builder


def client_show_claims_keyboard(claims):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param claims: –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: InlineKeyboardBuilder –æ–±—ä–µ–∫—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏.
    """
    builder = InlineKeyboardBuilder()
    for claim in claims:
        if int(claim[6]) != 2:
            date_object = datetime.strptime(claim[4], "%Y-%m-%d")
            state = 'üïì'
            if int(claim[6]) == 1:
                state = '‚úÖ'
            if int(claim[6]) == 2:
                state = 'ü§ë'
            if int(claim[6]) == 3:
                state = '‚ùå'
            builder.row(
                types.InlineKeyboardButton(text=f"{state} {claim[3].capitalize()} | {date_object.strftime('%d.%m')} {claim[5]}",
                                           callback_data=f"claim_{claim[0]}"),
                width=1)
    builder.row(types.InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data=f"start"),
                width=1)
    return builder


def claim_keyboard():
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: InlineKeyboardBuilder –æ–±—ä–µ–∫—Ç —Å –∫–Ω–æ–ø–∫–æ–π.
    """
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data=f"client_show_claims"),
                width=1)
    return builder


def await_claim_for_admins(user_id):
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_claim_for_admins_{user_id}"),
                width=1)
    builder.row(types.InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_claim_for_admins_{user_id}"),
                width=1)
    return builder


def admin_menu():
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text="–ê–¥–º–∏–Ω—ã", callback_data="admin_show_admins"))
    builder.row(types.InlineKeyboardButton(text="–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏", callback_data="admin_show_workers"))
    builder.row(types.InlineKeyboardButton(text="–ó–∞—è–≤–∫–∏", callback_data="admin_show_claims"))
    builder.row(types.InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="admin_send_message"))
    return builder


def admin_show_admins(admins):
    builder = InlineKeyboardBuilder()
    for admin in admins:
        builder.row(types.InlineKeyboardButton(text=f"{' '.join(admin[2].split()[:2])}",
                                               callback_data=f"admin_show_admin_{admin[1]}"))
    builder.row(types.InlineKeyboardButton(text=f"¬´ –ù–∞–∑–∞–¥", callback_data="admin_menu"))
    return builder


def admin_show_admin_():
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text=f"¬´ –ù–∞–∑–∞–¥", callback_data="admin_show_admins"))
    return builder


def admin_show_workers(workers):
    builder = InlineKeyboardBuilder()
    for worker in workers:
        builder.row(types.InlineKeyboardButton(text=f"{' '.join(worker['name'].split()[:2])}",
                                               callback_data=f"admin_show_worker_{worker['id']}"))
    builder.row(types.InlineKeyboardButton(text=f"¬´ –ù–∞–∑–∞–¥", callback_data="admin_menu"))
    return builder


def admin_show_worker_(flag, worker_id):
    builder = InlineKeyboardBuilder()
    if flag == 1:
        builder.row(types.InlineKeyboardButton(text=f"–î–æ–±–∞–≤–∏—Ç—å username —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", callback_data=f"admin_add_worker_username_{worker_id}"))
    else:
        builder.row(types.InlineKeyboardButton(text=f"–ü–æ–º–µ–Ω—è—Ç—å username —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞",
                                               callback_data=f"admin_remove_worker_username_{worker_id}"))
    builder.row(types.InlineKeyboardButton(text=f"¬´ –ù–∞–∑–∞–¥", callback_data="admin_show_workers"))
    return builder


def admin_add_worker_username_(worker_id):
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text=f"¬´ –ù–∞–∑–∞–¥", callback_data=f"admin_show_worker_{worker_id}"))
    return builder


def worker_menu():
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text="–ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã", callback_data="worker_show_claims_new"))
    builder.row(types.InlineKeyboardButton(text="–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã", callback_data="worker_show_completed"))
    builder.row(types.InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã", callback_data="worker_show_claims_rejected"))
    return builder


def worker_show_claims_new(claims):
    builder = InlineKeyboardBuilder()
    for claim in claims:
        date_object = datetime.strptime(claim[4], "%Y-%m-%d")
        builder.row(
            types.InlineKeyboardButton(text=f"{'üïì' if claim[6] == 0 else '‚úÖ'} {claim[3].capitalize()} | {date_object.strftime('%d.%m')} {claim[5]}",
                                       callback_data=f"worker_show_claim_{claim[0]}"),
            width=1)
    builder.row(types.InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data=f"master_menu"),
                width=1)
    return builder


def worker_show_completed(claims):
    builder = InlineKeyboardBuilder()
    for claim in claims:
        date_object = datetime.strptime(claim[4], "%Y-%m-%d")
        builder.row(
            types.InlineKeyboardButton(text=f"ü§ë {claim[3].capitalize()} | {date_object.strftime('%d.%m')} {claim[5]}",
                                       callback_data=f"worker_show_claim_{claim[0]}"),
            width=1)
    builder.row(types.InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data=f"master_menu"),
                width=1)
    return builder


def worker_show_claims_rejected(claims):
    builder = InlineKeyboardBuilder()
    for claim in claims:
        date_object = datetime.strptime(claim[4], "%Y-%m-%d")
        builder.row(
            types.InlineKeyboardButton(text=f"‚ùå {claim[3].capitalize()} | {date_object.strftime('%d.%m')} {claim[5]}",
                                       callback_data=f"worker_show_claim_{claim[0]}"),
            width=1)
    builder.row(types.InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data=f"master_menu"),
                width=1)
    return builder


def worker_show_claim_():
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data=f"master_menu"),
                width=1)
    return builder


def send_claim_admin_keyboard(claim_id):
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"admin_answer_claim_{claim_id}_1"),
                width=1)
    builder.row(types.InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_answer_claim_{claim_id}_3"),
                width=1)
    return builder
