from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram import Router, F, types, Bot
from aiogram.filters import Command
from aiogram.types import Message, InputMediaPhoto
from yclients_things import DataProcessor
from handlers import keyboards
from aiogram.types import FSInputFile
from database import Admin, User, Worker, Claim
from datetime import datetime
import config
from handlers.keyboards import admin_menu

router = Router()


class MasterState(StatesGroup):
    user_await = State()

@router.message(Command("master"))
async def master(message: Message, worker_manager: Worker):
    """
    –ü–∞–Ω–µ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    –∏–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.

    :param message:
    :param worker_manager:
    """
    username = "@" + str(message.from_user.username)
    worker = await worker_manager.get_worker_by_username(username)
    if username not in worker:
        await message.answer_photo(photo=FSInputFile('handlers/images/admin.jpg'),
                                   caption=f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤–∞—Å –Ω–µ—Ç –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö(( "
                                           f"–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏–ª –≤–∞—à username –≤ –±–∞–∑—É."
                                           f"\n\n–ù–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    else:
        if message.chat.id not in worker:
            await worker_manager.update_worker(message.chat.id, username)
        await message.answer_photo(photo=FSInputFile('handlers/images/master.jpg'),
                                   caption=f"–í–æ—Ç –º–µ–Ω—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:", reply_markup=keyboards.worker_menu().as_markup())


@router.callback_query(F.data == "master_menu")
async def master_menu(callback: types.CallbackQuery, worker_manager: Worker):
    """
    –í—ã–¥–∞–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.

    :param callback:
    :param worker_manager:
    :return:
    """
    await callback.message.edit_caption(caption=f"–í–æ—Ç –º–µ–Ω—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:",
                                        reply_markup=keyboards.worker_menu().as_markup())



@router.callback_query(F.data == "worker_show_claims_new")
async def worker_show_claims_new(callback: types.CallbackQuery, worker_manager: Worker, claim_manager: Claim):
    """
    –í—ã–¥–∞–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.

    :param callback:
    :param worker_manager:
    :param claim_manager:
    :return:
    """
    worker = await worker_manager.get_worker_by_user_id(callback.message.chat.id)
    all_claims = await claim_manager.get_claim_by_master(worker[3])
    claims = [claim for claim in all_claims if claim[6] in [0, 1]]
    await callback.message.edit_media(media=InputMediaPhoto(media=FSInputFile('handlers/images/admin.jpg'),
                                                            caption=f"–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤:"),
                                      reply_markup=keyboards.worker_show_claims_new(claims).as_markup())


@router.callback_query(F.data == "worker_show_completed")
async def worker_show_completed(callback: types.CallbackQuery, worker_manager: Worker, claim_manager: Claim):
    """
    –í—ã–¥–∞–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.

    :param callback:
    :param worker_manager:
    :param claim_manager:
    :return:
    """
    worker = await worker_manager.get_worker_by_user_id(callback.message.chat.id)
    all_claims = await claim_manager.get_claim_by_master(worker[3])
    claims = [claim for claim in all_claims if claim[6] in [2]]
    await callback.message.edit_media(media=InputMediaPhoto(media=FSInputFile('handlers/images/admin.jpg'),
                                                            caption=f"–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤:"),
                                      reply_markup=keyboards.worker_show_completed(claims).as_markup())


@router.callback_query(F.data == "worker_show_claims_rejected")
async def worker_show_claims_rejected(callback: types.CallbackQuery, worker_manager: Worker, claim_manager: Claim):
    """
    –í—ã–¥–∞–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.

    :param callback:
    :param worker_manager:
    :param claim_manager:
    :return:
    """
    worker = await worker_manager.get_worker_by_user_id(callback.message.chat.id)
    all_claims = await claim_manager.get_claim_by_master(worker[3])
    claims = [claim for claim in all_claims if claim[6] in [3]]
    await callback.message.edit_media(media=InputMediaPhoto(media=FSInputFile('handlers/images/admin.jpg'),
                                                            caption=f"–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤:"),
                                      reply_markup=keyboards.worker_show_claims_rejected(claims).as_markup())


@router.callback_query(F.data.startswith("worker_show_claim_"))
async def claim_(callback: types.CallbackQuery, user_manager: User,
                 data_processor: DataProcessor, claim_manager: Claim, bot: Bot):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞—è–≤–∫–µ.

    :param callback:
    :param user_manager:
    :param data_processor: –û–±—ä–µ–∫—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ YClients API.
    :param claim_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫.
    :param bot:
    """
    claim_id = int(callback.data.split("_")[3])
    claim = await claim_manager.get_claim_by_id(claim_id)
    worker = data_processor.get_staff_by_id(int(claim[2]))
    price = data_processor.get_service_price_by_name(claim[3])
    date_object = datetime.strptime(claim[4], "%Y-%m-%d")
    time_object = datetime.strptime(claim[5], "%H:%M").time()
    state = '–Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏ üïì'
    if int(claim[6]) == 1:
        state = '–æ–¥–æ–±—Ä–µ–Ω–∞ ‚úÖ'
    if int(claim[6]) == 2:
        state = '–∏—Å–ø–æ–ª–Ω–µ–Ω–∞ ü§ë'
    if int(claim[6]) == 3:
        state = '–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ ‚ùå'
    user = await user_manager.get_user_by_id_telegram(claim[1])
    user_username = await bot.get_chat(claim[1])
    await callback.message.edit_media(media=InputMediaPhoto(media=FSInputFile('handlers/images/claim.jpg'),
                                                            caption=f"<b>–ó–ê–Ø–í–ö–ê</b> | <i>–°—Ç–∞—Ç—É—Å:</i> {state}"
                                                                    f"\n\n–ó–∞–∫–∞–∑—á–∏–∫: {user[2]}"
                                                                    f"\nTelegram: @{user_username.username}"
                                                                    f"\n\n<b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫:</b> {worker['name']} ({worker['rating']}‚≠êÔ∏è)"
                                                                    f"\n<b>–í—ã–±—Ä–∞–Ω–Ω–∞—è —É—Å–ª—É–≥–∞:</b> {claim[3].capitalize()}"
                                                                    f"\n<b>–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏:</b> {price}‚ÇΩ"
                                                                    f"\n<b>–î–∞—Ç–∞:</b> {date_object.strftime('%d.%m.%Y')}"
                                                                    f"\n<b>–í—Ä–µ–º—è:</b> {time_object.strftime('%H:%M')}"),
                                      reply_markup=keyboards.worker_show_claim_().as_markup())


@router.callback_query(F.data.startswith("admin_answer_claim_"))
async def admin_answer_claim_(callback: types.CallbackQuery, user_manager: User,
                 data_processor: DataProcessor, claim_manager: Claim, bot: Bot):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞—è–≤–∫–µ.

    :param callback:
    :param user_manager:
    :param data_processor: –û–±—ä–µ–∫—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ YClients API.
    :param claim_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫.
    :param bot:
    """
    claim_id = int(callback.data.split("_")[3])
    state_n = int(callback.data.split("_")[4])
    await claim_manager.update_claim_state(claim_id, state_n)
    claim = await claim_manager.get_claim_by_id(claim_id)
    state = '–Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏ üïì'
    if int(claim[6]) == 1:
        state = '–æ–¥–æ–±—Ä–µ–Ω–∞ ‚úÖ'
    if int(claim[6]) == 2:
        state = '–∏—Å–ø–æ–ª–Ω–µ–Ω–∞ ü§ë'
    if int(claim[6]) == 3:
        state = '–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ ‚ùå'
    worker = data_processor.get_staff_by_id(int(claim[2]))
    price = data_processor.get_service_price_by_name(claim[3])
    date_object = datetime.strptime(claim[4], "%Y-%m-%d")
    time_object = datetime.strptime(claim[5], "%H:%M").time()
    user = await user_manager.get_user_by_id_telegram(claim[1])
    user_username = await bot.get_chat(user[1])
    await callback.message.edit_text(f"<b>–ó–ê–Ø–í–ö–ê</b> | <i>–°—Ç–∞—Ç—É—Å:</i> {state}"
                                    f"\n\n–ó–∞–∫–∞–∑—á–∏–∫: {user[2]}"
                                    f"\nTelegram: @{user_username.username}"
                                    f"\n\n<b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫:</b> {worker['name']} ({worker['rating']}‚≠êÔ∏è)"
                                    f"\n<b>–í—ã–±—Ä–∞–Ω–Ω–∞—è —É—Å–ª—É–≥–∞:</b> {claim[3].capitalize()}"
                                    f"\n<b>–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏:</b> {price}‚ÇΩ"
                                    f"\n<b>–î–∞—Ç–∞:</b> {date_object.strftime('%d.%m.%Y')}"
                                    f"\n<b>–í—Ä–µ–º—è:</b> {time_object.strftime('%H:%M')}"
                                    f"\n\n–ù–∞–∂–º–∏—Ç–µ /master —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.")

    await bot.send_message(user[1], f"<b>–û–¢–ö–õ–ò–ö –ü–û –ó–ê–Ø–í–ö–ï</b> | <i>–°—Ç–∞—Ç—É—Å:</i> {state}"
                                                    f"\n\n<b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫:</b> {worker['name']} ({worker['rating']}‚≠êÔ∏è)"
                                                    f"\n<b>–í—ã–±—Ä–∞–Ω–Ω–∞—è —É—Å–ª—É–≥–∞:</b> {claim[3].capitalize()}"
                                                    f"\n<b>–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏:</b> {price}‚ÇΩ"
                                                    f"\n<b>–î–∞—Ç–∞:</b> {date_object.strftime('%d.%m.%Y')}"
                                                    f"\n<b>–í—Ä–µ–º—è:</b> {time_object.strftime('%H:%M')}"
                                                    f"\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ /start —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")